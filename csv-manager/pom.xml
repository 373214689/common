<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- 用在子模块中，实现对父模块的继承 -->
    <parent>
        <groupId>com.liuyang</groupId>
        <artifactId>common</artifactId>
        <version>1.0.4-RELEASE</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <!-- 如果继承了父模块，则不需要填写 groupId。-->
    <!--<groupId>com.liuyang</groupId>-->
    <artifactId>csv-manager</artifactId>
    <!-- 可以使用父模块的版本号，保持版本同步 -->
    <!--<version>1.0.0-SNAPSHOT</version>-->
    <!--<version>1.0.1-RELEASE</version>-->
    <!-- maven打包方式，默认为jar，还有：pom,maven-plugin,war,rar,zip -->
    <packaging>jar</packaging>

    <!-- 项目描述名，url，详细描述，产生项目文档使用 -->
    <name>CSV File Manager</name>
    <url>http://maven.apache.org</url>
    <description>CSV文件管理器。包含查询、写入和修改功能，还可以使用 SQL 进行间单地操作。</description>

    <properties>
        <java.version>1.8</java.version>
        <maven.version>3.6.1</maven.version>
        <source.encoding>UTF-8</source.encoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.liuyang</groupId>
            <artifactId>common-api</artifactId>
            <version>${project.version}</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.liuyang</groupId>
            <artifactId>data-schema</artifactId>
            <version>${project.version}</version>
            <optional>true</optional>
        </dependency>

    </dependencies>

    <build>
        <sourceDirectory>${project.basedir}/src/main/java</sourceDirectory>
        <testSourceDirectory>${project.basedir}/src/test</testSourceDirectory>
        <!--<scriptSourceDirectory>${basedir}/src/scripts</scriptSourceDirectory>-->
        <!--
         Maven定制化打包后的包名
         Maven默认的包名为:<finalName>${project.artifactId}-${project.version}</finalName>
         定制化想要的包名,如加上时间戳:<finalName>${project.artifactId}-${maven.build.timestamp}</finalName>
        -->
        <finalName>${project.artifactId}</finalName>
        <!-- 插件列表 -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.version}</version>
                    <configuration>
                        <!-- 源代码编译版本 -->
                        <source>${java.version}</source>
                        <!-- 目标平台编译版本 -->
                        <target>${java.version}</target>
                        <!-- 设置编译字符集编码 -->
                        <encoding>${source.encoding}</encoding>
                        <compilerArgs>
                            <!-- 过期的方法的警告-->
                            <arg>-Xlint:deprecation</arg>
                        </compilerArgs>
                        <compilerArguments>
                            <!-- 是否输出所有的编译信息（包括类的加载等）-->
                            <!--<verbose />-->
                            <!-- 解决maven命令编译报错，因为rt.jar 和jce.jar在jre的lib下面，不在jdk的lib下面，
                            导致maven找不到（java7以后会出现这个问题），将这2个jar包拷贝到jdk的lib下面估计也好使-->
                            <bootclasspath>${java.home}\lib\rt.jar;${java.home}\lib\jce.jar</bootclasspath>
                        </compilerArguments>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>